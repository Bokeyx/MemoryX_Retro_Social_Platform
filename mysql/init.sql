-- 이 스크립트는 MySQL 컨테이너가 처음 시작될 때 (데이터 볼륨이 비어있을 때) 자동으로 실행됩니다.
-- 데이터베이스 생성, 사용자/권한 설정, 그리고 모든 테이블 스키마 생성을 담당합니다.

-- 데이터베이스가 존재하지 않으면 생성합니다.
CREATE DATABASE IF NOT EXISTS memory_x_db;

-- 데이터베이스를 사용합니다.
USE memory_x_db;

-- =================================================================
-- 테이블 생성 (모든 요구사항 통합)
-- =================================================================

-- SONGS 테이블
CREATE TABLE IF NOT EXISTS SONGS (
   SONG_ID       INT AUTO_INCREMENT PRIMARY KEY,
   TITLE          VARCHAR(255) NOT NULL,
   ARTIST          VARCHAR(255) NOT NULL,
   YEAR         INT,
   MONTH         INT,
   LYRICS         LONGTEXT,
   TOP_WORDS      VARCHAR(255),
   PREDICT         INT
);

-- CONTENTS 테이블
CREATE TABLE IF NOT EXISTS CONTENTS (
   CONTENT_ID       INT AUTO_INCREMENT PRIMARY KEY,
   TITLE          VARCHAR(255) NOT NULL,
   RELEASE_DATE    DATE NOT NULL,
   OVERVIEW       LONGTEXT NOT NULL,
   POSTER_URL      VARCHAR(255)
);

-- USERS 테이블 (방문자 수 및 날짜 컬럼 추가)
CREATE TABLE IF NOT EXISTS USERS (
   USER_ID       VARCHAR(20) PRIMARY KEY,
   PASSWORD       VARCHAR(100) NOT NULL,
   NAME          VARCHAR(50) NOT NULL,
   BIRTH          DATE,
   PHONE          VARCHAR(20),
   EMAIL          VARCHAR(50) NOT NULL,
   SEX          CHAR(1) NOT NULL,
   AUTH_PROVIDER    VARCHAR(50),
   BLOOD_TYPE       VARCHAR(2),
   INTRODUCTION    LONGTEXT,
   MYSONG          INT,
   PROFILE_IMAGE    VARCHAR(255),
   VISITED       INT NOT NULL DEFAULT 0,
   REPORT_CNT       INT NOT NULL DEFAULT 0,
   USER_STATUS    VARCHAR(20) NOT NULL,
   TOTAL_VISIT_COUNT INT DEFAULT 0, -- 👈 [추가] 총 방문자수
   LAST_VISIT_DATE   DATETIME,      -- 👈 [추가] 마지막 방문 날짜
   CREATED_AT       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
   
   CONSTRAINT FK_MYSONG FOREIGN KEY (MYSONG) REFERENCES SONGS(SONG_ID) ON DELETE SET NULL
);

-- DIARIES 테이블
CREATE TABLE IF NOT EXISTS DIARIES (
   DIARY_ID       INT AUTO_INCREMENT PRIMARY KEY,
   DIARY_USER       VARCHAR(20) NOT NULL,
   ORIGINAL_TEXT    LONGTEXT NOT NULL,
   RETRO_TEXT       LONGTEXT NOT NULL,
   RECO_SONG       INT,
   RECO_CONTENT    INT,
   EMOTION_LABEL    VARCHAR(20),
   PUBLIC_SCOPE    CHAR(1) NOT NULL DEFAULT 'P',
   CREATED_AT       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
   LIKE_CNT         INT NOT NULL DEFAULT 0,

   CONSTRAINT FK_DIARY_USER FOREIGN KEY (DIARY_USER) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
   CONSTRAINT FK_RECO_SONG FOREIGN KEY (RECO_SONG) REFERENCES SONGS(SONG_ID) ON DELETE SET NULL,
   CONSTRAINT FK_RECO_CONTENT FOREIGN KEY (RECO_CONTENT) REFERENCES CONTENTS(CONTENT_ID) ON DELETE SET NULL
);

-- GUEST_BOOK 테이블
CREATE TABLE IF NOT EXISTS GUEST_BOOK (
   GB_ID          INT AUTO_INCREMENT PRIMARY KEY,
   GB_USER       VARCHAR(20) NOT NULL,
   WRITER_ID       VARCHAR(20) NOT NULL,
   CONTENT       VARCHAR(255) NOT NULL,
   CREATED_AT       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,

   CONSTRAINT FK_GUEST_BOOK_USER FOREIGN KEY (GB_USER) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
   CONSTRAINT FK_GUEST_BOOK_WRITER FOREIGN KEY (WRITER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

-- LIKES 테이블
CREATE TABLE IF NOT EXISTS LIKES (
    LIKE_ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID VARCHAR(20) NOT NULL,
    CONTENT_TYPE VARCHAR(20) NOT NULL,
    CONTENT_ID INT NOT NULL,
    DIARY_ID INT, -- DIARY_ID 컬럼 추가
    CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT FK_CONTENT_LIKE_USER FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
    CONSTRAINT FK_LIKE_DIARY FOREIGN KEY (DIARY_ID) REFERENCES DIARIES(DIARY_ID) ON DELETE CASCADE,
    UNIQUE KEY UK_USER_CONTENT_LIKE (USER_ID, CONTENT_TYPE, CONTENT_ID)
);

-- COMMENTS 테이블
CREATE TABLE IF NOT EXISTS COMMENTS (
   COMMENT_ID       INT AUTO_INCREMENT PRIMARY KEY,
   CONTENT_TYPE    VARCHAR(20) NOT NULL,
   CONTENT_ID       INT NOT NULL,
   COMMENT_USER    VARCHAR(20) NOT NULL,
   CONTENT       VARCHAR(255) NOT NULL,
   CREATED_AT       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,

   CONSTRAINT FK_COMMENTS_USER FOREIGN KEY (COMMENT_USER) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
   CONSTRAINT CK_CONTENT_TYPE CHECK (CONTENT_TYPE IN ('DIARY', 'GUEST_BOOK'))
);

-- FRIENDS 테이블 (요청/수신 구조로 최종 통합)
CREATE TABLE IF NOT EXISTS FRIENDS (
    FRIENDS_ID          INT AUTO_INCREMENT PRIMARY KEY,
    REQUESTING_USER     VARCHAR(20) NOT NULL,
    RECEIVING_USER      VARCHAR(20) NOT NULL,
    RELATIONSHIP_STATUS VARCHAR(20) NOT NULL DEFAULT 'PENDING', -- (PENDING, ACCEPTED, BLOCKED)
    EMOTION_COMMON      VARCHAR(255),
    CREATED_AT          TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT FK_FRIENDS_REQUESTING_USER FOREIGN KEY (REQUESTING_USER) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
    CONSTRAINT FK_FRIENDS_RECEIVING_USER FOREIGN KEY (RECEIVING_USER) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

-- COMMUNITY_MATCHES 테이블
CREATE TABLE IF NOT EXISTS COMMUNITY_MATCHES (
   CM_ID          INT AUTO_INCREMENT PRIMARY KEY,
   CM_USER       VARCHAR(20) NOT NULL,
   MATCHED_USER    VARCHAR(20) NOT NULL,
   EMOTION_COMMON    VARCHAR(255),
   CREATED_AT       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,

   CONSTRAINT FK_CM_USER FOREIGN KEY (CM_USER) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
   CONSTRAINT FK_CM_MATCHED_USER FOREIGN KEY (MATCHED_USER) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

-- NOTIFICATIONS 테이블 (모든 요구사항 반영하여 최종 통합)
CREATE TABLE IF NOT EXISTS NOTIFICATIONS (
   NOTI_ID       BIGINT AUTO_INCREMENT PRIMARY KEY,
   RECIPIENT_ID    VARCHAR(20) NOT NULL,
   SENDER_ID       VARCHAR(20),
   MESSAGE       VARCHAR(255),
   IS_READ       VARCHAR(255) NOT NULL DEFAULT 'N',
   NOTIFICATION_TYPE VARCHAR(50),
   RELATED_URL    VARCHAR(255),
   CREATED_AT       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,

   CONSTRAINT FK_NOTI_RECIPIENT FOREIGN KEY (RECIPIENT_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
   CONSTRAINT FK_NOTI_SENDER FOREIGN KEY (SENDER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
   CONSTRAINT CK_NOTI_IS_READ CHECK (IS_READ IN ('N', 'Y'))
);

-- NEWS 테이블
CREATE TABLE IF NOT EXISTS NEWS (
   NEWS_ID       INT AUTO_INCREMENT PRIMARY KEY,
   YEAR          INT NOT NULL,
   MONTH          INT NOT NULL,
   DAY          INT NOT NULL,
   TOPICS          LONGTEXT NOT NULL
);

-- =================================================================
-- 기본 데이터 삽입
-- =================================================================

-- 'newsAi' 사용자가 존재하지 않으면 추가
INSERT IGNORE INTO USERS (USER_ID, PASSWORD, NAME, EMAIL, SEX, AUTH_PROVIDER, USER_STATUS)
VALUES ('newsAi', 'password', '뉴스봇', 'news_ai@memory-x.com', 'M', 'SYSTEM', 'ACTIVE');


-- =================================================================
-- 사용자 및 권한 설정
-- =================================================================

-- 'memoryx'@'localhost' 사용자를 생성하고 비밀번호를 설정합니다. (IF NOT EXISTS 사용)
CREATE USER IF NOT EXISTS 'memoryx'@'localhost' IDENTIFIED BY 'memoryx486';

-- 'memoryx'@'localhost' 사용자에게 memory_x_db 데이터베이스의 모든 권한을 부여합니다.
GRANT ALL PRIVILEGES ON memory_x_db.* TO 'memoryx'@'localhost';

-- 'memoryx'@'%' 사용자를 생성하고 비밀번호를 설정합니다. (IF NOT EXISTS 사용)
CREATE USER IF NOT EXISTS 'memoryx'@'%' IDENTIFIED BY 'memoryx486';

-- 'memoryx'@'%' 사용자에게 memory_x_db 데이터베이스의 모든 권한을 부여합니다.
GRANT ALL PRIVILEGES ON memory_x_db.* TO 'memoryx'@'%';

-- 중요: Spring Boot 초기화 과정에서 MySQL 시스템 테이블에 접근할 수 있도록 SELECT 권한 부여
GRANT SELECT ON mysql.* TO 'memoryx'@'%';
GRANT SELECT ON mysql.* TO 'memoryx'@'localhost';

-- 변경된 권한 설정을 즉시 적용 (필수)
FLUSH PRIVILEGES;
